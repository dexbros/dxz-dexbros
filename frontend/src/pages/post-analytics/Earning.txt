import React from 'react';
import { Line, Bar } from "react-chartjs-2";
import { connect } from "react-redux";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend, PointElement,
  Chart, ChartConfiguration, LineController, LineElement
} from 'chart.js';
import Daily from './EranAnalytics/Daily';
import Monthly from './EranAnalytics/Monthly';
import { useNavigate, useParams } from 'react-router-dom';
import axios from "axios";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  PointElement, LineController, LineElement
);

const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "July", "Aug", "Set", "Oct", "Nov", "Dec"]

const EarningAnalytics = ({ post, token }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [earning, setEarning] = React.useState([]);
  const [time, setTime] = React.useState([]);
  const [mode, setMode] = React.useState("daily");

  const [monthlyEarning, setMonthlyEarning] = React.useState([]);
  const [monthList, setMonthList] = React.useState([]);
  const [openMonthList, setOpenMonthList] = React.useState(false);
  const [userList, setUserList] = React.useState([]);

  React.useEffect(() => {
    
    for (const property in post.earn) {
      if (mode === "daily") {
        if (new Date().getDate() - new Date(Number(property)).getDate() === 0) {
          setEarning(prev => [...prev, post.earn[property]]);
          setTime(prev => [...prev, `${new Date(Number(property)).getHours()}:${new Date(Number(property)).getMinutes()}`]);
        }
      }
      else if (mode === "monthly") {
        setEarning([]);
        setTime([]);
        if (monthList.includes(months[new Date(Number(property)).getMonth()])) {
          // console.log("Have ", months[new Date(Number(property)).getMonth()])
          // setMonthList(prev => [...prev, months[new Date(Number(property)).getMonth()]])
        } else {
          // console.log("Have ", months[new Date(Number(property)).getMonth()])
        }
      }
    };
  }, [mode]);


  const data = {
    labels: time,
    datasets: [
      {
        label: "Post minute earning",
        fill: false,
        lineTension: 0.1,
        backgroundColor: "rgba(75,192,192,0.4)",
        borderColor: "rgba(75,192,192,1)",
        borderCapStyle: "butt",
        borderDash: [],
        borderDashOffset: 0.0,
        borderJoinStyle: "miter",
        pointBorderColor: "rgba(75,192,192,1)",
        pointBackgroundColor: "#fff",
        pointBorderWidth: 1,
        pointHoverRadius: 5,
        pointHoverBackgroundColor: "rgba(75,192,192,1)",
        pointHoverBorderColor: "rgba(220,220,220,1)",
        pointHoverBorderWidth: 2,
        pointRadius: 1,
        pointHitRadius: 10,
        data: earning
      }
    ]
  };

  // Month data
  const monthdata = {
    labels: monthList,
    datasets: [
      {
        label: "Post minute earning",
        fill: false,
        lineTension: 0.1,
        backgroundColor: "rgba(75,192,192,0.4)",
        borderColor: "rgba(75,192,192,1)",
        borderCapStyle: "butt",
        borderDash: [],
        borderDashOffset: 0.0,
        borderJoinStyle: "miter",
        pointBorderColor: "rgba(75,192,192,1)",
        pointBackgroundColor: "#fff",
        pointBorderWidth: 1,
        pointHoverRadius: 5,
        pointHoverBackgroundColor: "rgba(75,192,192,1)",
        pointHoverBorderColor: "rgba(220,220,220,1)",
        pointHoverBorderWidth: 2,
        pointRadius: 1,
        pointHitRadius: 10,
        data: earning
      }
    ]
  };

  const lineOptions = {
    onClick: (e, element) => {
      if (element.length > 0) {
        var ind = element[0]._index;
        alert(ind);
      }
    },
    scales: {
      xAxes: [
        {
          gridLines: {
            display: false
          }
        }
      ],
      yAxes: [
        {
          // stacked: true,
          gridLines: {
            display: false
          },
          ticks: {
            beginAtZero: true,
            // Return an empty string to draw the tick line but hide the tick label
            // Return `null` or `undefined` to hide the tick line entirely
            userCallback(value) {
              // Convert the number to a string and splite the string every 3 charaters from the end
              value = value.toString();
              value = value.split(/(?=(?:...)*$)/);

              // Convert the array to a string and format the output
              value = value.join(".");
              return `Rp.${value}`;
            }
          }
        }
      ]
    },
    legend: {
      display: false
    },
    tooltips: {
      enabled: false
    }
  };

  const handleSelectMonth = () => {
    setMode("monthly");
    setOpenMonthList(true);
  }

  const handleYear = () => {
    setMode("yearly");
    setOpenMonthList(false);
  }

  const handleDaily = () => {
    setMode("daily");
    setOpenMonthList(false);
  }

  const handleSelect = (val) => {
    setSelectMonth(val);
    setOpenMonthList(false);
  }

  // Fetch earn history
  React.useEffect(() => {
    axios.get(`${process.env.REACT_APP_URL_LINK}api/posts/fetch/donate/history/${id}`, {
      headers: { 'Authorization': 'Bearer ' + token }
    })
      .then(res => {
        console.log(res.data);
        setUserList(res.data);
      })
      .catch(err => {
        console.log(err);
      })
  }, [id]);

  const handleRedirect = () => {
    navigate(`/view/history/${id}`);
  }

  return (
    <div>
      <div className='post_analytics_tab'>
        <li
          className={mode === "daily" ? 'post_analytics_main_tab active_post_analytics_main_tab' : 'post_analytics_main_tab'}
          onClick={handleDaily}
        >
          Daily
        </li>
        <li
          className={mode === "monthly" ? 'post_analytics_main_tab active_post_analytics_main_tab monthly_tab' : 'monthly_tab post_analytics_main_tab'}
          onClick={handleSelectMonth}
        >
          Monthly
        </li>

        <li
          className={mode === "yearly" ? 'post_analytics_main_tab active_post_analytics_main_tab' : 'post_analytics_main_tab'}
          onClick={handleYear}
        >
          Yearly
        </li>
      </div>
      {
        mode === "daily" ?
          <Daily post={post} /> :
          <>
            {
              mode === "monthly" ?
                <Monthly post={post} mode={mode} /> :
                <Line data={data} />
            }
          </>
      }
      <div className='earnin_history_container'>
        <span className='history_header'>History</span><br />
        <span className='history_sub_header'>View last 5 earning history</span>
      </div>
      <div className='earning_list_container'>
        {
          (userList || []).length > 0 ?
            <>
            {
              userList.map(data => (
                <div className='history_card' key={data.id} onClick={() => navigate(`/view/full/details/${data.id}`)}>
                  <div className='main_history_box'>
                    <span className='history_text'>Receive from{" "}</span>
                    <span className='historyuser_name'>{data.s_name}</span><br />
                    <span className='earning_date'>
                      {new Date(Number(data.id)).getDate()}-{new Date(Number(data.id)).getMonth() + 1}-{new Date(Number(data.id)).getFullYear()}
                    </span>
                  </div>
                  <span className='earn_amount'>{data.amount}</span>
                </div>
              ))
            }
            <button className='view_all_btn' onClick={handleRedirect}>View all history</button>
            </> :
            <div className='empty_history'>No history present</div>
        }
      </div>
    </div>
  )
};


const mapStateToProps = state => ({
    user: state.user.user,
    token: state.user.token
})
  
const mapDispatchToProps = dispatch => ({
  setPageType: (type) => dispatch(setPageType(type)),
  login: (user, token) => dispatch(userLogin(user, token)),
})
  
export default connect(mapStateToProps, mapDispatchToProps)(EarningAnalytics);